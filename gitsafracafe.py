import json
import streamlit as st
import geemap
import ee 
# Configura√ß√£o da p√°gina
#st.set_page_config(layout="wide")
#st.title("Google Earth Engine no Streamlit üåç")

# Inicializa√ß√£o do GEE com tratamento de erro
try:
    # Verifica se as credenciais existem
    if "GEE_CREDENTIALS" not in st.secrets:
        st.error("‚ùå Credenciais do GEE n√£o encontradas em secrets.toml!")
    else:
        # Carrega as credenciais
        credentials_dict = dict(st.secrets["GEE_CREDENTIALS"])
        credentials_json = json.dumps(credentials_dict)

        # Inicializa o GEE
        credentials = ee.ServiceAccountCredentials(
            email=credentials_dict["client_email"],
            key_data=credentials_json
        )
        ee.Initialize(credentials)
        #st.success("‚úÖ Google Earth Engine inicializado com sucesso!")

        # Exemplo: Carrega um mapa do GEE
        Map = geemap.Map(center=(40, -100), zoom=4)
        Map.add_basemap("SATELLITE")  # Adiciona imagem de sat√©lite
        Map.to_streamlit()  # Renderiza o mapa no Streamlit

except Exception as e:
    st.error(f"üö® Erro ao inicializar o GEE: {str(e)}")

################################
# INICIAR GERA√á√ÉO DO MAPA
################################

import json
import time
import random
import string
import numpy as np
import pandas as pd
import zipfile
import geemap
import ee
import geopandas as gpd
import streamlit as st
from shapely.geometry import Point, mapping, shape
from fiona.drvsupport import supported_drivers
import pydeck as pdk
from io import BytesIO
import base64
import os

# Vari√°veis de estado (substituem as vari√°veis globais)
if 'gdf_poligono' not in st.session_state:
    st.session_state.gdf_poligono = None
if 'gdf_pontos' not in st.session_state:
    st.session_state.gdf_pontos = None
if 'gdf_poligono_total' not in st.session_state:
    st.session_state.gdf_poligono_total = None
if 'unidade_selecionada' not in st.session_state:
    st.session_state.unidade_selecionada = 'kg'
if 'densidade_plantas' not in st.session_state:
    st.session_state.densidade_plantas = None
if 'produtividade_media' not in st.session_state:
    st.session_state.produtividade_media = None


# Fun√ß√µes auxiliares
def gerar_codigo():
    letras = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    numeros = ''.join(random.choices(string.digits, k=2))
    return f"{letras}-{numeros}-{''.join(random.choices(string.ascii_uppercase + string.digits, k=4))}"


def converter_para_kg(valor, unidade):
    if pd.isna(valor):
        return 0
    try:
        valor = float(valor)
    except:
        return 0

    if unidade == 'kg':
        return valor
    elif unidade == 'latas':
        return valor * 1.8
    elif unidade == 'litros':
        return valor * 0.09
    return valor


def get_utm_epsg(lon, lat):
    utm_zone = int((lon + 180) / 6) + 1
    return 32600 + utm_zone if lat >= 0 else 32700 + utm_zone


def create_map():
    """Cria um mapa Pydeck com as camadas necess√°rias"""
    layers = []

    # Adiciona pol√≠gono se existir
    if st.session_state.gdf_poligono is not None:
        polygon_layer = pdk.Layer(
            "PolygonLayer",
            data=st.session_state.gdf_poligono,
            get_polygon="geometry.coordinates",
            get_fill_color=[0, 0, 255, 100],
            get_line_color=[0, 0, 255],
            pickable=True,
            auto_highlight=True,
        )
        layers.append(polygon_layer)

    # Adiciona pontos se existirem
    if st.session_state.gdf_pontos is not None:
        points_df = st.session_state.gdf_pontos[['longitude', 'latitude', 'coletado', 'Code', 'valor', 'unidade']].copy()
        points_df['color'] = points_df['coletado'].apply(lambda x: [0, 255, 0, 200] if x else [255, 165, 0, 200])
        point_layer = pdk.Layer(
            "ScatterplotLayer",
            data=points_df,
            get_position=["longitude", "latitude"],
            get_color="color",
            get_radius=50,
            pickable=True,
        )
        layers.append(point_layer)

    # Configura√ß√£o inicial do mapa
    view_state = pdk.ViewState(
        latitude=-15,
        longitude=-55,
        zoom=4,
        pitch=0,
    )

    return pdk.Deck(
        layers=layers,
        initial_view_state=view_state,
        map_style="mapbox://styles/mapbox/satellite-v9",
        tooltip={
            "html": """
                <b>Ponto:</b> {Code}<br/>
                <b>Produtividade:</b> {valor} {unidade}<br/>
                <b>Coletado:</b> {coletado}
            """,
            "style": {
                "backgroundColor": "steelblue",
                "color": "white"
            }
        }
    )


def main():
    st.set_page_config(layout="wide")
    st.title("Sistema de previs√£o avan√ßada da produtividade do caf√©")
    st.markdown("""
        Este √© um projeto de geotecnologia para previs√£o da produtividade do caf√©,
        com o uso de imagens do sensor MSI/Sentinel-2A e algoritmos de machine learning.
    """)
    st.subheader("Etapas do projeto e aplica√ß√µes pr√°ticas")

    st.markdown("""
    - **√Årea produtiva:** delimita√ß√£o das √°reas de interesse (amostral e total) e gera√ß√£o de pontos amostrais (2 pontos/hectare).
    - **Coleta de dados:** inser√ß√£o de informa√ß√µes de produtividade e sele√ß√£o autom√°tica de imagens de sat√©lite (sensor MSI/Sentinel-2A), com 5% de nuvens.
    - **C√°lculo de √≠ndices espectrais**: NDVI, GNDVI, MSAVI2 (rela√ß√£o com o desenvolvimento vegetativo); NDRE e CCCI (conte√∫do de clorofila); NDMI, NDWI e TWI2 (umidade do solo, conte√∫do de √°gua das folhas e umidade do ar) e NBR (estresse t√©rmico).  
    - **Avalia√ß√£o da correla√ß√£o entre a produtividade e √≠ndices espectrais**: teste de Shapiro-Wilk para normalidade dos dados e correla√ß√£o de Pearson (maioria normal) ou Spearman (n√£o normal).
    - **Modelagem de produtividade:** treinamento com 11 algoritmos de machine learning, avalia√ß√£o do desempenho (m√©tricas R¬≤ e RMSE) e escolha do melhor modelo para previs√£o da produtividade.
    - **Gera√ß√£o de mapas interativos:** visualiza√ß√£o da variabilidade espacial da produtividade e estimativa antecipada da colheita.
    - **Exporta√ß√£o de dados:** resultados em formato compat√≠vel com SIG, para integra√ß√£o com ferramentas de gest√£o agr√≠cola.
    - **Compara√ß√£o entre safras:** avalia√ß√£o de padr√µes visuais e produtivos ao longo do tempo.
    - **An√°lise detalhada:** identifica√ß√£o de √°reas promissoras ou com necessidade de aten√ß√£o para o planejamento da pr√≥xima safra.
    """)

    # Inicializa√ß√£o do estado da sess√£o
    if 'gdf_poligono' not in st.session_state:
        st.session_state.gdf_poligono = None
    if 'gdf_pontos' not in st.session_state:
        st.session_state.gdf_pontos = None
    if 'gdf_poligono_total' not in st.session_state:
        st.session_state.gdf_poligono_total = None

    col1, col2 = st.columns([1, 3])

    with col1:
        st.header("Controles")

        # Upload de arquivos
        uploaded_file = st.file_uploader("Carregar arquivo (.gpkg, .shp, .kml, .kmz)",
                                         type=['gpkg', 'shp', 'kml', 'kmz'],
                                         accept_multiple_files=True)

        if uploaded_file:
            processar_arquivo_carregado(uploaded_file[0])

        if st.button("‚ñ∂Ô∏è √Årea Amostral"):
            st.session_state.modo_desenho = 'amostral'
            st.success("Modo desenho ativado: √Årea Amostral")

        if st.button("‚ñ∂Ô∏è √Årea Total"):
            st.session_state.modo_desenho = 'total'
            st.success("Modo desenho ativado: √Årea Total")

        if st.button("üóëÔ∏è Limpar √Årea"):
            st.session_state.gdf_poligono = None
            st.session_state.gdf_poligono_total = None
            st.session_state.gdf_pontos = None
            st.success("√Åreas limpas!")

        st.subheader("Par√¢metros da √Årea")
        st.session_state.densidade_plantas = st.number_input("Plantas por hectare:", value=0.0)
        st.session_state.produtividade_media = st.number_input("Produtividade m√©dia (sacas/ha):", value=0.0)

        if st.button("üî¢ Gerar pontos automaticamente"):
            if st.session_state.gdf_poligono is not None:
                gerar_pontos_automaticos()

        if st.button("‚úèÔ∏è Inserir pontos manualmente"):
            st.session_state.inserir_manual = True
            st.info("Clique no mapa para adicionar pontos")

        st.subheader("Produtividade")
        st.session_state.unidade_selecionada = st.selectbox("Unidade:", ['kg', 'latas', 'litros'])

        if st.button("üìù Inserir produtividade"):
            if st.session_state.gdf_pontos is not None:
                inserir_produtividade()

        if st.button("üíæ Exportar dados"):
            exportar_dados()

    with col2:
        st.header("Mapa Interativo")
        deck = create_map()
        st.pydeck_chart(deck)

        if hasattr(deck, 'last_clicked'):
            if deck.last_clicked and st.session_state.get('inserir_manual'):
                click_data = deck.last_clicked
                if isinstance(click_data, dict) and 'latitude' in click_data and 'longitude' in click_data:
                    adicionar_ponto(click_data['latitude'], click_data['longitude'], "manual")
                    st.session_state.inserir_manual = False
                    st.rerun()


if __name__ == "__main__":
    main()

