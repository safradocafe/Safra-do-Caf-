import ee
import json
import streamlit as st
import geemap
# Configura√ß√£o da p√°gina
#st.set_page_config(layout="wide")
#st.title("Google Earth Engine no Streamlit üåç")

# Inicializa√ß√£o do GEE com tratamento de erro
try:
    # Verifica se as credenciais existem
    if "GEE_CREDENTIALS" not in st.secrets:
        st.error("‚ùå Credenciais do GEE n√£o encontradas em secrets.toml!")
    else:
        # Carrega as credenciais
        credentials_dict = dict(st.secrets["GEE_CREDENTIALS"])
        credentials_json = json.dumps(credentials_dict)

        # Inicializa o GEE
        credentials = ee.ServiceAccountCredentials(
            email=credentials_dict["client_email"],
            key_data=credentials_json
        )
        ee.Initialize(credentials)
        #st.success("‚úÖ Google Earth Engine inicializado com sucesso!")

        # Exemplo: Carrega um mapa do GEE
        Map = geemap.Map(center=(40, -100), zoom=4)
        Map.add_basemap("SATELLITE")  # Adiciona imagem de sat√©lite
        Map.to_streamlit()  # Renderiza o mapa no Streamlit

except Exception as e:
    st.error(f"üö® Erro ao inicializar o GEE: {str(e)}")

################################
# INICIAR GERA√á√ÉO DO MAPA
################################

import os
import json
import time
import random
import string
import numpy as np
import pandas as pd
import zipfile
import geemap
import ee
import geopandas as gpd
import streamlit as st
from shapely.geometry import Point, mapping, shape
from fiona.drvsupport import supported_drivers
from streamlit_folium import st_folium
import folium
from io import BytesIO
import base64

# Configura√ß√£o inicial
#st.set_page_config(layout="wide")
#st.title("Sistema de Mapeamento de Produtividade de Caf√©")

# Verifica√ß√£o segura se o GEE j√° foi inicializado
#if not ee.data._initialized:  # Verifica o estado interno da API
    #try:
        #ee.Initialize()
        #st.success("‚úÖ Google Earth Engine inicializado com sucesso!")
    #except Exception as e:
        #st.error(f"Erro ao inicializar GEE: {str(e)}")
        #st.stop()
#else:
    #st.info("‚ÑπÔ∏è Google Earth Engine j√° estava inicializado")

# Vari√°veis de estado (substituem as vari√°veis globais)
if 'gdf_poligono' not in st.session_state:
    st.session_state.gdf_poligono = None
if 'gdf_pontos' not in st.session_state:
    st.session_state.gdf_pontos = None
if 'gdf_poligono_total' not in st.session_state:
    st.session_state.gdf_poligono_total = None
if 'unidade_selecionada' not in st.session_state:
    st.session_state.unidade_selecionada = 'kg'
if 'densidade_plantas' not in st.session_state:
    st.session_state.densidade_plantas = None
if 'produtividade_media' not in st.session_state:
    st.session_state.produtividade_media = None

# Fun√ß√µes auxiliares
def gerar_codigo():
    letras = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    numeros = ''.join(random.choices(string.digits, k=2))
    return f"{letras}-{numeros}-{''.join(random.choices(string.ascii_uppercase + string.digits, k=4))}"

def converter_para_kg(valor, unidade):
    if pd.isna(valor):
        return 0
    try:
        valor = float(valor)
    except:
        return 0

    if unidade == 'kg':
        return valor
    elif unidade == 'latas':
        return valor * 1.8
    elif unidade == 'litros':
        return valor * 0.09
    return valor

def get_utm_epsg(lon, lat):
    utm_zone = int((lon + 180) / 6) + 1
    return 32600 + utm_zone if lat >= 0 else 32700 + utm_zone

def safe_st_folium(m, width=800, height=600):
    """Wrapper seguro para st_folium com fallback"""
    try:
        from streamlit_folium import st_folium
        return st_folium(
            m,
            width=width,
            height=height,
            returned_objects=["last_clicked"]
        )
    except Exception:
        # Fallback para html direto
        import tempfile
        with tempfile.NamedTemporaryFile(suffix='.html', delete=False) as f:
            m.save(f.name)
            html = open(f.name).read()
        return st.components.v1.html(html, width=width, height=height)

def create_map():
    try:
        m = geemap.Map(center=[-15, -55], zoom=4)

        # Adi√ß√£o de basemap com fallback
        try:
            m.add_basemap('HYBRID')
        except Exception:
            m.add_basemap('OpenStreetMap')
            
        return m
    except Exception as e:
        st.error(f"Falha cr√≠tica na cria√ß√£o do mapa: {str(e)}")
        st.stop()

# Interface principal
import streamlit as st

# Interface principal
def main():
    st.set_page_config(layout="wide")
    st.title("Sistema de previs√£o avan√ßada da produtividade do caf√©")  
    st.markdown("""
        Este √© um projeto de geotecnologia para previs√£o da produtividade do caf√©,
        com o uso de imagens do sensor MSI/Sentinel-2A e algoritmos de machine learning.
    """)
    st.subheader("Etapas do projeto e aplica√ß√µes pr√°ticas")

    st.markdown("""
    - **√Årea produtiva:** delimita√ß√£o das √°reas de interesse (amostral e total) e gera√ß√£o de pontos amostrais (2 pontos/hectare).
    - **Coleta de dados:** inser√ß√£o de informa√ß√µes de produtividade e sele√ß√£o autom√°tica de imagens de sat√©lite (sensor MSI/Sentinel-2A), com 5% de nuvens.
    - **C√°lculo de √≠ndices espectrais**: NDVI, GNDVI, MSAVI2 (rela√ß√£o com o desenvolvimento vegetativo); NDRE e CCCI (conte√∫do de clorofila); NDMI, NDWI e TWI2 (umidade do solo, conte√∫do de √°gua das folhas e umidade do ar) e NBR (estresse t√©rmico).  
    - **Avalia√ß√£o da correla√ß√£o entre a produtividade e √≠ndices espectrais**: teste de Shapiro-Wilk para normalidade dos dados e correla√ß√£o de Pearson (maioria normal) ou Spearman (n√£o normal).
    - **Modelagem de produtividade:** treinamento com 11 algoritmos de machine learning, avalia√ß√£o do desempenho (m√©tricas R¬≤ e RMSE) e escolha do melhor modelo para previs√£o da produtividade.
    - **Gera√ß√£o de mapas interativos:** visualiza√ß√£o da variabilidade espacial da produtividade e estimativa antecipada da colheita.
    - **Exporta√ß√£o de dados:** resultados em formato compat√≠vel com SIG, para integra√ß√£o com ferramentas de gest√£o agr√≠cola.
    - **Compara√ß√£o entre safras:** avalia√ß√£o de padr√µes visuais e produtivos ao longo do tempo.
    - **An√°lise detalhada:** identifica√ß√£o de √°reas promissoras ou com necessidade de aten√ß√£o para o planejamento da pr√≥xima safra.
    """)
    
    # Inicializa√ß√£o do estado da sess√£o
    if 'gdf_poligono' not in st.session_state:
        st.session_state.gdf_poligono = None
    if 'gdf_pontos' not in st.session_state:
        st.session_state.gdf_pontos = None
    if 'gdf_poligono_total' not in st.session_state:
        st.session_state.gdf_poligono_total = None
        
    col1, col2 = st.columns([1, 3])

    with col1:
        st.header("Controles")
        
        # Upload de arquivos
        uploaded_file = st.file_uploader("Carregar arquivo (.gpkg, .shp, .kml, .kmz)", 
                                       type=['gpkg', 'shp', 'kml', 'kmz'],
                                       accept_multiple_files=True)
        
        # Controles de √°rea
        if st.button("‚ñ∂Ô∏è √Årea Amostral"):
            st.session_state.modo_desenho = 'amostral'
            st.success("Modo desenho ativado: √Årea Amostral")
        
        if st.button("‚ñ∂Ô∏è √Årea Total"):
            st.session_state.modo_desenho = 'total'
            st.success("Modo desenho ativado: √Årea Total")
        
        if st.button("üóëÔ∏è Limpar √Årea"):
            st.session_state.gdf_poligono = None
            st.session_state.gdf_poligono_total = None
            st.session_state.gdf_pontos = None
            st.success("√Åreas limpas!")
        
        # Par√¢metros da √°rea
        st.subheader("Par√¢metros da √Årea")
        st.session_state.densidade_plantas = st.number_input("Plantas por hectare:", value=0.0)
        st.session_state.produtividade_media = st.number_input("Produtividade m√©dia (sacas/ha):", value=0.0)
        
        # Controles de pontos
        if st.button("üî¢ Gerar pontos automaticamente"):
            if st.session_state.gdf_poligono is not None:
                gerar_pontos_automaticos()
        
        if st.button("‚úèÔ∏è Inserir pontos manualmente"):
            st.session_state.inserir_manual = True
            st.info("Clique no mapa para adicionar pontos")
        
        # Produtividade
        st.subheader("Produtividade")
        st.session_state.unidade_selecionada = st.selectbox("Unidade:", ['kg', 'latas', 'litros'])
        
        if st.button("üìù Inserir produtividade"):
            if st.session_state.gdf_pontos is not None:
                inserir_produtividade()
        
        # Exporta√ß√£o
        if st.button("üíæ Exportar dados"):
            exportar_dados()

    with col2:
        st.header("Mapa Interativo")
        
        # Cria√ß√£o do mapa
        m = create_map()
        
        # Adiciona geometrias ao mapa
        if st.session_state.gdf_poligono is not None:
            m.add_gdf(st.session_state.gdf_poligono, layer_name="√Årea Amostral", style={'color': 'blue'})
        
        if st.session_state.gdf_pontos is not None:
            for idx, row in st.session_state.gdf_pontos.iterrows():
                color = 'green' if row['coletado'] else 'orange'
                folium.CircleMarker(
                    location=[row.geometry.y, row.geometry.x],
                    radius=5,
                    color=color,
                    fill=True,
                    fill_color=color,
                    popup=f"Ponto {idx+1}"
                ).add_to(m)
        
        # Exibi√ß√£o do mapa
        map_output = safe_st_folium(m, width=800, height=600)
        
        # Processamento de cliques
        if map_output and map_output.get("last_clicked") and st.session_state.get('inserir_manual'):
            click_lat = map_output["last_clicked"]["lat"]
            click_lng = map_output["last_clicked"]["lng"]
            adicionar_ponto(click_lat, click_lng, "manual")
            st.session_state.inserir_manual = False
            st.rerun()

if __name__ == "__main__":
    main()
# Implementa√ß√£o das fun√ß√µes principais
def processar_arquivo_carregado(uploaded_file):
    try:
        # Cria um arquivo tempor√°rio
        temp_file = f"./temp_{uploaded_file.name}"
        with open(temp_file, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        # Processa de acordo com o tipo de arquivo
        if uploaded_file.name.endswith('.gpkg'):
            gdf = gpd.read_file(temp_file)
        elif uploaded_file.name.endswith('.shp'):
            gdf = gpd.read_file(temp_file)
        elif uploaded_file.name.endswith('.kml'):
            gdf = gpd.read_file(temp_file, driver='KML')
        elif uploaded_file.name.endswith('.kmz'):
            with zipfile.ZipFile(temp_file, 'r') as kmz:
                kml_files = [f for f in kmz.namelist() if f.endswith('.kml')]
                if kml_files:
                    with kmz.open(kml_files[0]) as kml:
                        gdf = gpd.read_file(kml, driver='KML')
        
        # Remove arquivo tempor√°rio
        os.remove(temp_file)
        
        # Atualiza estado conforme o modo
        if st.session_state.modo_desenho == 'amostral':
            st.session_state.gdf_poligono = gdf
            st.success("√Årea amostral carregada com sucesso!")
        elif st.session_state.modo_desenho == 'total':
            st.session_state.gdf_poligono_total = gdf
            st.success("√Årea total carregada com sucesso!")
        
        return gdf
    except Exception as e:
        st.error(f"Erro ao processar arquivo: {str(e)}")
        return None

def gerar_pontos_automaticos():
    if st.session_state.gdf_poligono is None:
        st.warning("Defina a √°rea amostral primeiro!")
        return
    
    centroid = st.session_state.gdf_poligono.geometry.centroid.iloc[0]
    epsg = get_utm_epsg(centroid.x, centroid.y)
    gdf_utm = st.session_state.gdf_poligono.to_crs(epsg=epsg)
    area_ha = gdf_utm.geometry.area.sum() / 10000
    lado = np.sqrt(5000)  # 2 pontos por hectare

    bounds = gdf_utm.total_bounds
    x_coords = np.arange(bounds[0], bounds[2], lado)
    y_coords = np.arange(bounds[1], bounds[3], lado)

    pontos = [Point(x, y) for x in x_coords for y in y_coords 
              if gdf_utm.geometry.iloc[0].contains(Point(x, y))]
    
    gdf_pontos = gpd.GeoDataFrame(geometry=pontos, crs=gdf_utm.crs).to_crs("EPSG:4326")
    
    # Adiciona metadados
    gdf_pontos['Code'] = [gerar_codigo() for _ in range(len(gdf_pontos))]
    gdf_pontos['valor'] = 0
    gdf_pontos['unidade'] = 'kg'
    gdf_pontos['maduro_kg'] = 0
    gdf_pontos['coletado'] = False
    gdf_pontos['latitude'] = gdf_pontos.geometry.y
    gdf_pontos['longitude'] = gdf_pontos.geometry.x
    gdf_pontos['metodo'] = 'auto'
    
    st.session_state.gdf_pontos = gdf_pontos
    st.success(f"{len(gdf_pontos)} pontos gerados automaticamente! √Årea: {area_ha:.2f} ha")

def adicionar_ponto(lat, lon, metodo):
    ponto = Point(lon, lat)
    
    if st.session_state.gdf_pontos is None:
        gdf_pontos = gpd.GeoDataFrame(columns=[
            'geometry', 'Code', 'valor', 'unidade', 'maduro_kg',
            'coletado', 'latitude', 'longitude', 'metodo'
        ], geometry='geometry', crs="EPSG:4326")
    else:
        gdf_pontos = st.session_state.gdf_pontos
    
    novo_ponto = {
        'geometry': ponto,
        'Code': gerar_codigo(),
        'valor': 0,
        'unidade': st.session_state.unidade_selecionada,
        'maduro_kg': 0,
        'coletado': False,
        'latitude': lat,
        'longitude': lon,
        'metodo': metodo
    }
    
    st.session_state.gdf_pontos = gpd.GeoDataFrame(
        pd.concat([gdf_pontos, pd.DataFrame([novo_ponto])]), 
        crs="EPSG:4326"
    )
    st.success(f"Ponto {len(st.session_state.gdf_pontos)} adicionado ({metodo})")

def inserir_produtividade():
    if st.session_state.gdf_pontos is None or st.session_state.gdf_pontos.empty:
        st.warning("Nenhum ponto dispon√≠vel!")
        return
    
    with st.expander("Editar Produtividade dos Pontos"):
        for idx, row in st.session_state.gdf_pontos.iterrows():
            cols = st.columns([1, 2, 2, 1])
            with cols[0]:
                st.write(f"**Ponto {idx+1}**")
                st.write(f"Lat: {row['latitude']:.5f}")
                st.write(f"Lon: {row['longitude']:.5f}")
            with cols[1]:
                novo_valor = st.number_input(
                    "Valor", 
                    value=float(row['valor']),
                    key=f"valor_{idx}"
                )
            with cols[2]:
                nova_unidade = st.selectbox(
                    "Unidade",
                    ['kg', 'latas', 'litros'],
                    index=['kg', 'latas', 'litros'].index(row['unidade']),
                    key=f"unidade_{idx}"
                )
            with cols[3]:
                coletado = st.checkbox(
                    "Coletado",
                    value=row['coletado'],
                    key=f"coletado_{idx}"
                )
            
            # Atualiza os dados
            st.session_state.gdf_pontos.at[idx, 'valor'] = novo_valor
            st.session_state.gdf_pontos.at[idx, 'unidade'] = nova_unidade
            st.session_state.gdf_pontos.at[idx, 'coletado'] = coletado
            st.session_state.gdf_pontos.at[idx, 'maduro_kg'] = converter_para_kg(novo_valor, nova_unidade)
        
        if st.button("Salvar Altera√ß√µes"):
            st.success("Dados de produtividade atualizados!")
            st.rerun()

def exportar_dados():
    if st.session_state.gdf_poligono is None:
        st.warning("Nenhuma √°rea para exportar!")
        return
    
    # Cria um arquivo ZIP na mem√≥ria
    zip_buffer = BytesIO()
    with zipfile.ZipFile(zip_buffer, 'a', zipfile.ZIP_DEFLATED, False) as zip_file:
        # Adiciona par√¢metros
        parametros = {
            'densidade_pes_ha': st.session_state.densidade_plantas,
            'produtividade_media_sacas_ha': st.session_state.produtividade_media
        }
        zip_file.writestr('parametros_area.json', json.dumps(parametros))
        
        # Adiciona pol√≠gonos
        if st.session_state.gdf_poligono is not None:
            poligono_buffer = BytesIO()
            st.session_state.gdf_poligono.to_file(poligono_buffer, driver='GPKG')
            zip_file.writestr('area_poligono.gpkg', poligono_buffer.getvalue())
        
        if st.session_state.gdf_poligono_total is not None:
            poligono_total_buffer = BytesIO()
            st.session_state.gdf_poligono_total.to_file(poligono_total_buffer, driver='GPKG')
            zip_file.writestr('area_total_poligono.gpkg', poligono_total_buffer.getvalue())
        
        # Adiciona pontos
        if st.session_state.gdf_pontos is not None:
            pontos_buffer = BytesIO()
            st.session_state.gdf_pontos.to_file(pontos_buffer, driver='GPKG')
            zip_file.writestr('pontos_produtividade.gpkg', pontos_buffer.getvalue())
    
    # Cria bot√£o de download
    st.download_button(
        label="‚¨áÔ∏è Baixar todos os dados",
        data=zip_buffer.getvalue(),
        file_name="dados_produtividade.zip",
        mime="application/zip"
    )
    st.success("Dados preparados para exporta√ß√£o!")

# Processa arquivos carregados
if uploaded_file:
    processar_arquivo_carregado(uploaded_file[0])  # Pega o primeiro arquivo se m√∫ltiplos
